// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: payment-service/client/payment/payment.proto

package payment_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcPayment_GetUserWallet_FullMethodName = "/payment_protobuf.GrpcPayment/GetUserWallet"
)

// GrpcPaymentClient is the client API for GrpcPayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcPaymentClient interface {
	GetUserWallet(ctx context.Context, in *GetUserWalletReqGrpc, opts ...grpc.CallOption) (*GetUserWalletResGrpc, error)
}

type grpcPaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcPaymentClient(cc grpc.ClientConnInterface) GrpcPaymentClient {
	return &grpcPaymentClient{cc}
}

func (c *grpcPaymentClient) GetUserWallet(ctx context.Context, in *GetUserWalletReqGrpc, opts ...grpc.CallOption) (*GetUserWalletResGrpc, error) {
	out := new(GetUserWalletResGrpc)
	err := c.cc.Invoke(ctx, GrpcPayment_GetUserWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcPaymentServer is the server API for GrpcPayment service.
// All implementations must embed UnimplementedGrpcPaymentServer
// for forward compatibility
type GrpcPaymentServer interface {
	GetUserWallet(context.Context, *GetUserWalletReqGrpc) (*GetUserWalletResGrpc, error)
	mustEmbedUnimplementedGrpcPaymentServer()
}

// UnimplementedGrpcPaymentServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcPaymentServer struct {
}

func (UnimplementedGrpcPaymentServer) GetUserWallet(context.Context, *GetUserWalletReqGrpc) (*GetUserWalletResGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWallet not implemented")
}
func (UnimplementedGrpcPaymentServer) mustEmbedUnimplementedGrpcPaymentServer() {}

// UnsafeGrpcPaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcPaymentServer will
// result in compilation errors.
type UnsafeGrpcPaymentServer interface {
	mustEmbedUnimplementedGrpcPaymentServer()
}

func RegisterGrpcPaymentServer(s grpc.ServiceRegistrar, srv GrpcPaymentServer) {
	s.RegisterService(&GrpcPayment_ServiceDesc, srv)
}

func _GrpcPayment_GetUserWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWalletReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcPaymentServer).GetUserWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcPayment_GetUserWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcPaymentServer).GetUserWallet(ctx, req.(*GetUserWalletReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcPayment_ServiceDesc is the grpc.ServiceDesc for GrpcPayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcPayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment_protobuf.GrpcPayment",
	HandlerType: (*GrpcPaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserWallet",
			Handler:    _GrpcPayment_GetUserWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment-service/client/payment/payment.proto",
}
