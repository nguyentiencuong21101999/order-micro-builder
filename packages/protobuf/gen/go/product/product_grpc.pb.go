// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: product-service/client/product/product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GrpcProduct_GetProducts_FullMethodName = "/productProtobuf.GrpcProduct/GetProducts"
)

// GrpcProductClient is the client API for GrpcProduct service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcProductClient interface {
	GetProducts(ctx context.Context, in *GetProductsReqGrpc, opts ...grpc.CallOption) (*ProductResGrpc, error)
}

type grpcProductClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcProductClient(cc grpc.ClientConnInterface) GrpcProductClient {
	return &grpcProductClient{cc}
}

func (c *grpcProductClient) GetProducts(ctx context.Context, in *GetProductsReqGrpc, opts ...grpc.CallOption) (*ProductResGrpc, error) {
	out := new(ProductResGrpc)
	err := c.cc.Invoke(ctx, GrpcProduct_GetProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcProductServer is the server API for GrpcProduct service.
// All implementations must embed UnimplementedGrpcProductServer
// for forward compatibility
type GrpcProductServer interface {
	GetProducts(context.Context, *GetProductsReqGrpc) (*ProductResGrpc, error)
	mustEmbedUnimplementedGrpcProductServer()
}

// UnimplementedGrpcProductServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcProductServer struct {
}

func (UnimplementedGrpcProductServer) GetProducts(context.Context, *GetProductsReqGrpc) (*ProductResGrpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedGrpcProductServer) mustEmbedUnimplementedGrpcProductServer() {}

// UnsafeGrpcProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcProductServer will
// result in compilation errors.
type UnsafeGrpcProductServer interface {
	mustEmbedUnimplementedGrpcProductServer()
}

func RegisterGrpcProductServer(s grpc.ServiceRegistrar, srv GrpcProductServer) {
	s.RegisterService(&GrpcProduct_ServiceDesc, srv)
}

func _GrpcProduct_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsReqGrpc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcProductServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GrpcProduct_GetProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcProductServer).GetProducts(ctx, req.(*GetProductsReqGrpc))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcProduct_ServiceDesc is the grpc.ServiceDesc for GrpcProduct service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcProduct_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productProtobuf.GrpcProduct",
	HandlerType: (*GrpcProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProducts",
			Handler:    _GrpcProduct_GetProducts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product-service/client/product/product.proto",
}
