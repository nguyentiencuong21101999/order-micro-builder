// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               unknown
// source: order-service/client/order/order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Pagination } from "../../../base/dto";
import { OrderEntityGrpc, ProductEntityGrpc } from "../../../base/entity";

export const protobufPackage = "order.client.order";

/** create order */
export interface OrderProductGrpc {
  productId: string;
  name: string;
  imageUrl: string;
  price: number;
  quality: number;
  note?: string | undefined;
  attributes?: string | undefined;
}

export interface OrderCreateReqGrpc {
  userId: number;
  sumNote?: string | undefined;
  userAddressId: number;
  products: OrderProductGrpc[];
}

export interface OrderCreateResGrpc {
  data: boolean;
}

/** Get Orders */
export interface GetOrdersReqGrpc {
  page: number;
  limit: number;
  userId: number;
}

export interface OrderReqGrpc {
  order: OrderEntityGrpc | undefined;
  products: ProductEntityGrpc[];
}

export interface GetOrdersResGrpc {
  data: OrderReqGrpc[];
  pagination: Pagination | undefined;
}

function createBaseOrderProductGrpc(): OrderProductGrpc {
  return { productId: "", name: "", imageUrl: "", price: 0, quality: 0, note: undefined, attributes: undefined };
}

export const OrderProductGrpc: MessageFns<OrderProductGrpc> = {
  encode(message: OrderProductGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.imageUrl !== "") {
      writer.uint32(34).string(message.imageUrl);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.quality !== 0) {
      writer.uint32(48).int32(message.quality);
    }
    if (message.note !== undefined) {
      writer.uint32(58).string(message.note);
    }
    if (message.attributes !== undefined) {
      writer.uint32(66).string(message.attributes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderProductGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderProductGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.attributes = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderProductGrpc {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
      attributes: isSet(object.attributes) ? globalThis.String(object.attributes) : undefined,
    };
  },

  toJSON(message: OrderProductGrpc): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.imageUrl !== "") {
      obj.imageUrl = message.imageUrl;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    if (message.attributes !== undefined) {
      obj.attributes = message.attributes;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderProductGrpc>, I>>(base?: I): OrderProductGrpc {
    return OrderProductGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderProductGrpc>, I>>(object: I): OrderProductGrpc {
    const message = createBaseOrderProductGrpc();
    message.productId = object.productId ?? "";
    message.name = object.name ?? "";
    message.imageUrl = object.imageUrl ?? "";
    message.price = object.price ?? 0;
    message.quality = object.quality ?? 0;
    message.note = object.note ?? undefined;
    message.attributes = object.attributes ?? undefined;
    return message;
  },
};

function createBaseOrderCreateReqGrpc(): OrderCreateReqGrpc {
  return { userId: 0, sumNote: undefined, userAddressId: 0, products: [] };
}

export const OrderCreateReqGrpc: MessageFns<OrderCreateReqGrpc> = {
  encode(message: OrderCreateReqGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.sumNote !== undefined) {
      writer.uint32(18).string(message.sumNote);
    }
    if (message.userAddressId !== 0) {
      writer.uint32(24).int32(message.userAddressId);
    }
    for (const v of message.products) {
      OrderProductGrpc.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreateReqGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreateReqGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sumNote = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userAddressId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.products.push(OrderProductGrpc.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreateReqGrpc {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      sumNote: isSet(object.sumNote) ? globalThis.String(object.sumNote) : undefined,
      userAddressId: isSet(object.userAddressId) ? globalThis.Number(object.userAddressId) : 0,
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => OrderProductGrpc.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrderCreateReqGrpc): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.sumNote !== undefined) {
      obj.sumNote = message.sumNote;
    }
    if (message.userAddressId !== 0) {
      obj.userAddressId = Math.round(message.userAddressId);
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => OrderProductGrpc.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreateReqGrpc>, I>>(base?: I): OrderCreateReqGrpc {
    return OrderCreateReqGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreateReqGrpc>, I>>(object: I): OrderCreateReqGrpc {
    const message = createBaseOrderCreateReqGrpc();
    message.userId = object.userId ?? 0;
    message.sumNote = object.sumNote ?? undefined;
    message.userAddressId = object.userAddressId ?? 0;
    message.products = object.products?.map((e) => OrderProductGrpc.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOrderCreateResGrpc(): OrderCreateResGrpc {
  return { data: false };
}

export const OrderCreateResGrpc: MessageFns<OrderCreateResGrpc> = {
  encode(message: OrderCreateResGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== false) {
      writer.uint32(8).bool(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreateResGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreateResGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.data = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreateResGrpc {
    return { data: isSet(object.data) ? globalThis.Boolean(object.data) : false };
  },

  toJSON(message: OrderCreateResGrpc): unknown {
    const obj: any = {};
    if (message.data !== false) {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreateResGrpc>, I>>(base?: I): OrderCreateResGrpc {
    return OrderCreateResGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreateResGrpc>, I>>(object: I): OrderCreateResGrpc {
    const message = createBaseOrderCreateResGrpc();
    message.data = object.data ?? false;
    return message;
  },
};

function createBaseGetOrdersReqGrpc(): GetOrdersReqGrpc {
  return { page: 0, limit: 0, userId: 0 };
}

export const GetOrdersReqGrpc: MessageFns<GetOrdersReqGrpc> = {
  encode(message: GetOrdersReqGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    if (message.userId !== 0) {
      writer.uint32(24).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrdersReqGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrdersReqGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrdersReqGrpc {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
    };
  },

  toJSON(message: GetOrdersReqGrpc): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrdersReqGrpc>, I>>(base?: I): GetOrdersReqGrpc {
    return GetOrdersReqGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrdersReqGrpc>, I>>(object: I): GetOrdersReqGrpc {
    const message = createBaseGetOrdersReqGrpc();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseOrderReqGrpc(): OrderReqGrpc {
  return { order: undefined, products: [] };
}

export const OrderReqGrpc: MessageFns<OrderReqGrpc> = {
  encode(message: OrderReqGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== undefined) {
      OrderEntityGrpc.encode(message.order, writer.uint32(10).fork()).join();
    }
    for (const v of message.products) {
      ProductEntityGrpc.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderReqGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderReqGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.order = OrderEntityGrpc.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.products.push(ProductEntityGrpc.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderReqGrpc {
    return {
      order: isSet(object.order) ? OrderEntityGrpc.fromJSON(object.order) : undefined,
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => ProductEntityGrpc.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrderReqGrpc): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = OrderEntityGrpc.toJSON(message.order);
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => ProductEntityGrpc.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderReqGrpc>, I>>(base?: I): OrderReqGrpc {
    return OrderReqGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderReqGrpc>, I>>(object: I): OrderReqGrpc {
    const message = createBaseOrderReqGrpc();
    message.order = (object.order !== undefined && object.order !== null)
      ? OrderEntityGrpc.fromPartial(object.order)
      : undefined;
    message.products = object.products?.map((e) => ProductEntityGrpc.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetOrdersResGrpc(): GetOrdersResGrpc {
  return { data: [], pagination: undefined };
}

export const GetOrdersResGrpc: MessageFns<GetOrdersResGrpc> = {
  encode(message: GetOrdersResGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      OrderReqGrpc.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      Pagination.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetOrdersResGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrdersResGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(OrderReqGrpc.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = Pagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrdersResGrpc {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => OrderReqGrpc.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? Pagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: GetOrdersResGrpc): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => OrderReqGrpc.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = Pagination.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrdersResGrpc>, I>>(base?: I): GetOrdersResGrpc {
    return GetOrdersResGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrdersResGrpc>, I>>(object: I): GetOrdersResGrpc {
    const message = createBaseGetOrdersResGrpc();
    message.data = object.data?.map((e) => OrderReqGrpc.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? Pagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

export type GrpcOrderService = typeof GrpcOrderService;
export const GrpcOrderService = {
  create: {
    path: "/order.client.order.GrpcOrder/create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OrderCreateReqGrpc) => Buffer.from(OrderCreateReqGrpc.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OrderCreateReqGrpc.decode(value),
    responseSerialize: (value: OrderCreateResGrpc) => Buffer.from(OrderCreateResGrpc.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OrderCreateResGrpc.decode(value),
  },
  getOrders: {
    path: "/order.client.order.GrpcOrder/getOrders",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOrdersReqGrpc) => Buffer.from(GetOrdersReqGrpc.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetOrdersReqGrpc.decode(value),
    responseSerialize: (value: GetOrdersResGrpc) => Buffer.from(GetOrdersResGrpc.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetOrdersResGrpc.decode(value),
  },
} as const;

export interface GrpcOrderServer extends UntypedServiceImplementation {
  create: handleUnaryCall<OrderCreateReqGrpc, OrderCreateResGrpc>;
  getOrders: handleUnaryCall<GetOrdersReqGrpc, GetOrdersResGrpc>;
}

export interface GrpcOrderClient extends Client {
  create(
    request: OrderCreateReqGrpc,
    callback: (error: ServiceError | null, response: OrderCreateResGrpc) => void,
  ): ClientUnaryCall;
  create(
    request: OrderCreateReqGrpc,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OrderCreateResGrpc) => void,
  ): ClientUnaryCall;
  create(
    request: OrderCreateReqGrpc,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OrderCreateResGrpc) => void,
  ): ClientUnaryCall;
  getOrders(
    request: GetOrdersReqGrpc,
    callback: (error: ServiceError | null, response: GetOrdersResGrpc) => void,
  ): ClientUnaryCall;
  getOrders(
    request: GetOrdersReqGrpc,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetOrdersResGrpc) => void,
  ): ClientUnaryCall;
  getOrders(
    request: GetOrdersReqGrpc,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetOrdersResGrpc) => void,
  ): ClientUnaryCall;
}

export const GrpcOrderClient = makeGenericClientConstructor(
  GrpcOrderService,
  "order.client.order.GrpcOrder",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GrpcOrderClient;
  service: typeof GrpcOrderService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
