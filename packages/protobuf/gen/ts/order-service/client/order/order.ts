// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               unknown
// source: order-service/client/order/order.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "order.client.order";

export interface OrderCreateReqGrpc {
  productId: string;
  name: string;
}

export interface OrderCreateResGrpc {
  data: boolean;
}

function createBaseOrderCreateReqGrpc(): OrderCreateReqGrpc {
  return { productId: "", name: "" };
}

export const OrderCreateReqGrpc: MessageFns<OrderCreateReqGrpc> = {
  encode(message: OrderCreateReqGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreateReqGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreateReqGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreateReqGrpc {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: OrderCreateReqGrpc): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreateReqGrpc>, I>>(base?: I): OrderCreateReqGrpc {
    return OrderCreateReqGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreateReqGrpc>, I>>(object: I): OrderCreateReqGrpc {
    const message = createBaseOrderCreateReqGrpc();
    message.productId = object.productId ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseOrderCreateResGrpc(): OrderCreateResGrpc {
  return { data: false };
}

export const OrderCreateResGrpc: MessageFns<OrderCreateResGrpc> = {
  encode(message: OrderCreateResGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== false) {
      writer.uint32(8).bool(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderCreateResGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderCreateResGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.data = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderCreateResGrpc {
    return { data: isSet(object.data) ? globalThis.Boolean(object.data) : false };
  },

  toJSON(message: OrderCreateResGrpc): unknown {
    const obj: any = {};
    if (message.data !== false) {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderCreateResGrpc>, I>>(base?: I): OrderCreateResGrpc {
    return OrderCreateResGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderCreateResGrpc>, I>>(object: I): OrderCreateResGrpc {
    const message = createBaseOrderCreateResGrpc();
    message.data = object.data ?? false;
    return message;
  },
};

export type GrpcOrderService = typeof GrpcOrderService;
export const GrpcOrderService = {
  create: {
    path: "/order.client.order.GrpcOrder/Create",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: OrderCreateReqGrpc) => Buffer.from(OrderCreateReqGrpc.encode(value).finish()),
    requestDeserialize: (value: Buffer) => OrderCreateReqGrpc.decode(value),
    responseSerialize: (value: OrderCreateResGrpc) => Buffer.from(OrderCreateResGrpc.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OrderCreateResGrpc.decode(value),
  },
} as const;

export interface GrpcOrderServer extends UntypedServiceImplementation {
  create: handleUnaryCall<OrderCreateReqGrpc, OrderCreateResGrpc>;
}

export interface GrpcOrderClient extends Client {
  create(
    request: OrderCreateReqGrpc,
    callback: (error: ServiceError | null, response: OrderCreateResGrpc) => void,
  ): ClientUnaryCall;
  create(
    request: OrderCreateReqGrpc,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OrderCreateResGrpc) => void,
  ): ClientUnaryCall;
  create(
    request: OrderCreateReqGrpc,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OrderCreateResGrpc) => void,
  ): ClientUnaryCall;
}

export const GrpcOrderClient = makeGenericClientConstructor(
  GrpcOrderService,
  "order.client.order.GrpcOrder",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GrpcOrderClient;
  service: typeof GrpcOrderService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
