// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               unknown
// source: base/entity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "base.entity";

export interface ProductEntityGrpc {
  productId: number;
  name: string;
  imageUrl?: string | undefined;
  price: number;
  quality: number;
  note?: string | undefined;
  attribute?: string | undefined;
  createdBy?: number | undefined;
  createdDate?: string | undefined;
  updatedBy?: number | undefined;
  updatedDate?: string | undefined;
}

export interface OrderEntityGrpc {
  orderId: string;
  userId: number;
  totalQuality: number;
  sumNote: string;
  userAddressId: number;
  totalProduct: number;
  totalPrice: number;
  status: number;
  isPaid: boolean;
  totalPaid: number;
  createdBy?: number | undefined;
  createdDate?: string | undefined;
  updatedBy?: number | undefined;
  updatedDate?: string | undefined;
}

function createBaseProductEntityGrpc(): ProductEntityGrpc {
  return {
    productId: 0,
    name: "",
    imageUrl: undefined,
    price: 0,
    quality: 0,
    note: undefined,
    attribute: undefined,
    createdBy: undefined,
    createdDate: undefined,
    updatedBy: undefined,
    updatedDate: undefined,
  };
}

export const ProductEntityGrpc: MessageFns<ProductEntityGrpc> = {
  encode(message: ProductEntityGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== 0) {
      writer.uint32(8).int32(message.productId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.imageUrl !== undefined) {
      writer.uint32(26).string(message.imageUrl);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    if (message.quality !== 0) {
      writer.uint32(40).int32(message.quality);
    }
    if (message.note !== undefined) {
      writer.uint32(50).string(message.note);
    }
    if (message.attribute !== undefined) {
      writer.uint32(58).string(message.attribute);
    }
    if (message.createdBy !== undefined) {
      writer.uint32(8000).int32(message.createdBy);
    }
    if (message.createdDate !== undefined) {
      writer.uint32(16002).string(message.createdDate);
    }
    if (message.updatedBy !== undefined) {
      writer.uint32(24000).int32(message.updatedBy);
    }
    if (message.updatedDate !== undefined) {
      writer.uint32(32002).string(message.updatedDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductEntityGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductEntityGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.productId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.imageUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.quality = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.note = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.attribute = reader.string();
          continue;
        }
        case 1000: {
          if (tag !== 8000) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
        case 2000: {
          if (tag !== 16002) {
            break;
          }

          message.createdDate = reader.string();
          continue;
        }
        case 3000: {
          if (tag !== 24000) {
            break;
          }

          message.updatedBy = reader.int32();
          continue;
        }
        case 4000: {
          if (tag !== 32002) {
            break;
          }

          message.updatedDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductEntityGrpc {
    return {
      productId: isSet(object.productId) ? globalThis.Number(object.productId) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      imageUrl: isSet(object.imageUrl) ? globalThis.String(object.imageUrl) : undefined,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      quality: isSet(object.quality) ? globalThis.Number(object.quality) : 0,
      note: isSet(object.note) ? globalThis.String(object.note) : undefined,
      attribute: isSet(object.attribute) ? globalThis.String(object.attribute) : undefined,
      createdBy: isSet(object.createdBy) ? globalThis.Number(object.createdBy) : undefined,
      createdDate: isSet(object.createdDate) ? globalThis.String(object.createdDate) : undefined,
      updatedBy: isSet(object.updatedBy) ? globalThis.Number(object.updatedBy) : undefined,
      updatedDate: isSet(object.updatedDate) ? globalThis.String(object.updatedDate) : undefined,
    };
  },

  toJSON(message: ProductEntityGrpc): unknown {
    const obj: any = {};
    if (message.productId !== 0) {
      obj.productId = Math.round(message.productId);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.imageUrl !== undefined) {
      obj.imageUrl = message.imageUrl;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.quality !== 0) {
      obj.quality = Math.round(message.quality);
    }
    if (message.note !== undefined) {
      obj.note = message.note;
    }
    if (message.attribute !== undefined) {
      obj.attribute = message.attribute;
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = Math.round(message.createdBy);
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate;
    }
    if (message.updatedBy !== undefined) {
      obj.updatedBy = Math.round(message.updatedBy);
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductEntityGrpc>, I>>(base?: I): ProductEntityGrpc {
    return ProductEntityGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductEntityGrpc>, I>>(object: I): ProductEntityGrpc {
    const message = createBaseProductEntityGrpc();
    message.productId = object.productId ?? 0;
    message.name = object.name ?? "";
    message.imageUrl = object.imageUrl ?? undefined;
    message.price = object.price ?? 0;
    message.quality = object.quality ?? 0;
    message.note = object.note ?? undefined;
    message.attribute = object.attribute ?? undefined;
    message.createdBy = object.createdBy ?? undefined;
    message.createdDate = object.createdDate ?? undefined;
    message.updatedBy = object.updatedBy ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    return message;
  },
};

function createBaseOrderEntityGrpc(): OrderEntityGrpc {
  return {
    orderId: "",
    userId: 0,
    totalQuality: 0,
    sumNote: "",
    userAddressId: 0,
    totalProduct: 0,
    totalPrice: 0,
    status: 0,
    isPaid: false,
    totalPaid: 0,
    createdBy: undefined,
    createdDate: undefined,
    updatedBy: undefined,
    updatedDate: undefined,
  };
}

export const OrderEntityGrpc: MessageFns<OrderEntityGrpc> = {
  encode(message: OrderEntityGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.orderId !== "") {
      writer.uint32(10).string(message.orderId);
    }
    if (message.userId !== 0) {
      writer.uint32(16).int32(message.userId);
    }
    if (message.totalQuality !== 0) {
      writer.uint32(24).int32(message.totalQuality);
    }
    if (message.sumNote !== "") {
      writer.uint32(34).string(message.sumNote);
    }
    if (message.userAddressId !== 0) {
      writer.uint32(40).int32(message.userAddressId);
    }
    if (message.totalProduct !== 0) {
      writer.uint32(48).int32(message.totalProduct);
    }
    if (message.totalPrice !== 0) {
      writer.uint32(57).double(message.totalPrice);
    }
    if (message.status !== 0) {
      writer.uint32(64).int32(message.status);
    }
    if (message.isPaid !== false) {
      writer.uint32(72).bool(message.isPaid);
    }
    if (message.totalPaid !== 0) {
      writer.uint32(81).double(message.totalPaid);
    }
    if (message.createdBy !== undefined) {
      writer.uint32(8000).int32(message.createdBy);
    }
    if (message.createdDate !== undefined) {
      writer.uint32(16002).string(message.createdDate);
    }
    if (message.updatedBy !== undefined) {
      writer.uint32(24000).int32(message.updatedBy);
    }
    if (message.updatedDate !== undefined) {
      writer.uint32(32002).string(message.updatedDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrderEntityGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrderEntityGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orderId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalQuality = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sumNote = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.userAddressId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.totalProduct = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.totalPrice = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isPaid = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.totalPaid = reader.double();
          continue;
        }
        case 1000: {
          if (tag !== 8000) {
            break;
          }

          message.createdBy = reader.int32();
          continue;
        }
        case 2000: {
          if (tag !== 16002) {
            break;
          }

          message.createdDate = reader.string();
          continue;
        }
        case 3000: {
          if (tag !== 24000) {
            break;
          }

          message.updatedBy = reader.int32();
          continue;
        }
        case 4000: {
          if (tag !== 32002) {
            break;
          }

          message.updatedDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrderEntityGrpc {
    return {
      orderId: isSet(object.orderId) ? globalThis.String(object.orderId) : "",
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      totalQuality: isSet(object.totalQuality) ? globalThis.Number(object.totalQuality) : 0,
      sumNote: isSet(object.sumNote) ? globalThis.String(object.sumNote) : "",
      userAddressId: isSet(object.userAddressId) ? globalThis.Number(object.userAddressId) : 0,
      totalProduct: isSet(object.totalProduct) ? globalThis.Number(object.totalProduct) : 0,
      totalPrice: isSet(object.totalPrice) ? globalThis.Number(object.totalPrice) : 0,
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      isPaid: isSet(object.isPaid) ? globalThis.Boolean(object.isPaid) : false,
      totalPaid: isSet(object.totalPaid) ? globalThis.Number(object.totalPaid) : 0,
      createdBy: isSet(object.createdBy) ? globalThis.Number(object.createdBy) : undefined,
      createdDate: isSet(object.createdDate) ? globalThis.String(object.createdDate) : undefined,
      updatedBy: isSet(object.updatedBy) ? globalThis.Number(object.updatedBy) : undefined,
      updatedDate: isSet(object.updatedDate) ? globalThis.String(object.updatedDate) : undefined,
    };
  },

  toJSON(message: OrderEntityGrpc): unknown {
    const obj: any = {};
    if (message.orderId !== "") {
      obj.orderId = message.orderId;
    }
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.totalQuality !== 0) {
      obj.totalQuality = Math.round(message.totalQuality);
    }
    if (message.sumNote !== "") {
      obj.sumNote = message.sumNote;
    }
    if (message.userAddressId !== 0) {
      obj.userAddressId = Math.round(message.userAddressId);
    }
    if (message.totalProduct !== 0) {
      obj.totalProduct = Math.round(message.totalProduct);
    }
    if (message.totalPrice !== 0) {
      obj.totalPrice = message.totalPrice;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.isPaid !== false) {
      obj.isPaid = message.isPaid;
    }
    if (message.totalPaid !== 0) {
      obj.totalPaid = message.totalPaid;
    }
    if (message.createdBy !== undefined) {
      obj.createdBy = Math.round(message.createdBy);
    }
    if (message.createdDate !== undefined) {
      obj.createdDate = message.createdDate;
    }
    if (message.updatedBy !== undefined) {
      obj.updatedBy = Math.round(message.updatedBy);
    }
    if (message.updatedDate !== undefined) {
      obj.updatedDate = message.updatedDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderEntityGrpc>, I>>(base?: I): OrderEntityGrpc {
    return OrderEntityGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderEntityGrpc>, I>>(object: I): OrderEntityGrpc {
    const message = createBaseOrderEntityGrpc();
    message.orderId = object.orderId ?? "";
    message.userId = object.userId ?? 0;
    message.totalQuality = object.totalQuality ?? 0;
    message.sumNote = object.sumNote ?? "";
    message.userAddressId = object.userAddressId ?? 0;
    message.totalProduct = object.totalProduct ?? 0;
    message.totalPrice = object.totalPrice ?? 0;
    message.status = object.status ?? 0;
    message.isPaid = object.isPaid ?? false;
    message.totalPaid = object.totalPaid ?? 0;
    message.createdBy = object.createdBy ?? undefined;
    message.createdDate = object.createdDate ?? undefined;
    message.updatedBy = object.updatedBy ?? undefined;
    message.updatedDate = object.updatedDate ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
