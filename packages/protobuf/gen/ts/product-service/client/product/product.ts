// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               unknown
// source: product-service/client/product/product.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Pagination } from "../../../base/dto";
import { ProductEntityGrpc } from "../../../base/entity";

export const protobufPackage = "productProtobuf";

export interface GetProductsReqGrpc {
  page?: number | undefined;
  limit?: number | undefined;
}

export interface ProductResGrpc {
  data: ProductEntityGrpc[];
  pagination: Pagination | undefined;
}

function createBaseGetProductsReqGrpc(): GetProductsReqGrpc {
  return { page: undefined, limit: undefined };
}

export const GetProductsReqGrpc: MessageFns<GetProductsReqGrpc> = {
  encode(message: GetProductsReqGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== undefined) {
      writer.uint32(8).int32(message.page);
    }
    if (message.limit !== undefined) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductsReqGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductsReqGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductsReqGrpc {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : undefined,
    };
  },

  toJSON(message: GetProductsReqGrpc): unknown {
    const obj: any = {};
    if (message.page !== undefined) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== undefined) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetProductsReqGrpc>, I>>(base?: I): GetProductsReqGrpc {
    return GetProductsReqGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetProductsReqGrpc>, I>>(object: I): GetProductsReqGrpc {
    const message = createBaseGetProductsReqGrpc();
    message.page = object.page ?? undefined;
    message.limit = object.limit ?? undefined;
    return message;
  },
};

function createBaseProductResGrpc(): ProductResGrpc {
  return { data: [], pagination: undefined };
}

export const ProductResGrpc: MessageFns<ProductResGrpc> = {
  encode(message: ProductResGrpc, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      ProductEntityGrpc.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      Pagination.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProductResGrpc {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProductResGrpc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(ProductEntityGrpc.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = Pagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProductResGrpc {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => ProductEntityGrpc.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? Pagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ProductResGrpc): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => ProductEntityGrpc.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = Pagination.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProductResGrpc>, I>>(base?: I): ProductResGrpc {
    return ProductResGrpc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProductResGrpc>, I>>(object: I): ProductResGrpc {
    const message = createBaseProductResGrpc();
    message.data = object.data?.map((e) => ProductEntityGrpc.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? Pagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

export type GrpcProductService = typeof GrpcProductService;
export const GrpcProductService = {
  getProducts: {
    path: "/productProtobuf.GrpcProduct/GetProducts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProductsReqGrpc) => Buffer.from(GetProductsReqGrpc.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetProductsReqGrpc.decode(value),
    responseSerialize: (value: ProductResGrpc) => Buffer.from(ProductResGrpc.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ProductResGrpc.decode(value),
  },
} as const;

export interface GrpcProductServer extends UntypedServiceImplementation {
  getProducts: handleUnaryCall<GetProductsReqGrpc, ProductResGrpc>;
}

export interface GrpcProductClient extends Client {
  getProducts(
    request: GetProductsReqGrpc,
    callback: (error: ServiceError | null, response: ProductResGrpc) => void,
  ): ClientUnaryCall;
  getProducts(
    request: GetProductsReqGrpc,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ProductResGrpc) => void,
  ): ClientUnaryCall;
  getProducts(
    request: GetProductsReqGrpc,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ProductResGrpc) => void,
  ): ClientUnaryCall;
}

export const GrpcProductClient = makeGenericClientConstructor(
  GrpcProductService,
  "productProtobuf.GrpcProduct",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): GrpcProductClient;
  service: typeof GrpcProductService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
